#!/usr/bin/env node

"use strict";

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatBack:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
app.server = server;

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var url             = require('url')
  , WebSocketServer = require('ws').Server
  , wss             = new WebSocketServer({'server': server});

var userSocketMap = {};

wss.on('connection', function connection(ws) {
  var location = url.parse(ws.upgradeReq.url, true);
  // you might use location.query.access_token to authenticate or share sessions
  // or ws.upgradeReq.headers.cookie (see http://stackoverflow.com/a/16395220/151312)

  ws.on('message', function incoming(message, flags) {
    let obj = JSON.parse(message);
    console.log('#Websocket connection from user: ', message);
    if (!userSocketMap[obj.id]) {
      userSocketMap[obj.id] = { sockets : [] };
    }
    userSocketMap[obj.id].sockets.push(ws);
  });
});

server.broadcast = function(channel, message) {
  console.log('***** broadcast babee:\n', '*****channel:\n', channel, '\n*****message:\n', message);
  channel.users.forEach((item, index) => {
    if (!(item == message.postedBy) && (userSocketMap[item])) {
      userSocketMap[item].sockets.forEach((item, index) => {
        item.send(JSON.stringify(message));
      });
    }
  });
};


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports = server;
