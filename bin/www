#!/usr/bin/env node

'use strict';

/**
 * Module dependencies.
 */

let app = require('./app');
// let debug = require('debug')('chatBack:server');
let https = require('https');

let options = config.httpsOptions;
let port = config.port;

app.set('port', port);

/**
 * Create HTTP server.
 */

let server = https.createServer(options, app);
app.server = server;



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// let url = require('url');
let WebSocketServer = require('ws')
  .Server;
let wss = new WebSocketServer({
  'server': server
});

let userSocketMap = {};

wss.on('connection', function connection(ws) {
  // let location = url.parse(ws.upgradeReq.url, true);
  // you might use location.query.access_token to authenticate or share sessions
  // or ws.upgradeReq.headers.cookie
  //  (see http://stackoverflow.com/a/16395220/151312)

  ws.on('message', function incoming(message /*, flags */ ) {
    let obj = JSON.parse(message);
    console.log('#Websocket connection from user: ', message);
    if (!userSocketMap[obj._id]) {
      userSocketMap[obj._id] = {
        sockets: []
      };
    }
    userSocketMap[obj._id].sockets.push(ws);
  });
});

server.broadcast = function (channel, message) {
  channel.users.forEach((item /*, index */ ) => {
    if ((item !== message.postedBy) && (userSocketMap[item])) {
      userSocketMap[item].sockets.forEach((item /*, index */ ) => {
        item.send(JSON.stringify(message));
      });
    }
  });
};


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
  default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  console.log('Listening on ' + bind);
}

module.exports = server;
